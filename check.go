package jd_cookie

import (
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/astaxie/beego/httplib"
	"github.com/douzicao/sillyGirl/core"
)

var ua2 = `http/3.12.1;jdmall;android;version/10.1.2;build/89743;screen/1440x3007;os/11;network/wifi;`

type AutoGenerated struct {
	ClientVersion string `json:"clientVersion"`
	Client        string `json:"client"`
	Sv            string `json:"sv"`
	St            string `json:"st"`
	UUID          string `json:"uuid"`
	Sign          string `json:"sign"`
	FunctionID    string `json:"functionId"`
}

func appjmp(tokenKey string) (string, error) {
	v := url.Values{}
	v.Add("tokenKey", tokenKey)
	v.Add("to", ``)
	v.Add("client_type", "android")
	v.Add("appid", "879")
	v.Add("appup_type", "1")
	req := httplib.Get(`https://un.m.jd.com/cgi-bin/app/appjmp?` + v.Encode())
	req.Header("User-Agent", ua2)
	req.Header("accept", `text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3`)
	req.SetCheckRedirect(func(req *http.Request, via []*http.Request) error {
		return http.ErrUseLastResponse
	})
	rsp, err := req.Response()
	if err != nil {
		return "", err
	}
	cookies := strings.Join(rsp.Header.Values("Set-Cookie"), " ")
	pt_key := core.FetchCookieValue(cookies, "pt_key")
	return pt_key, nil
}

func Notify(pt_pin string, content string) {
	if jd_cookie.GetBool("disable_notify") {
		return
	}
	qqGroup := jd_cookie.GetInt("qqGroup")
	wxGroup := jd_cookie.GetInt("wxGroup")
	mode := jd_cookie.Get("notify_mode", "private")
	for _, tp := range []string{
		"qq", "tg", "wx",
	} {
		core.Bucket("pin" + strings.ToUpper(tp)).Foreach(func(k, v []byte) error {
			if string(k) == pt_pin && pt_pin != "" {
				if mode != "group" {
					if push, ok := core.Pushs[tp]; ok {
						push(string(v), content, qqGroup, "")
					}
				} else {
					if push, ok := core.GroupPushs[tp]; ok {
						if tp == "qq" {
							push(qqGroup, string(v), content, "")
						}
						if tp == "wx" {
							push(wxGroup, string(v), content, "")
						}
					}
				}
				time.Sleep(time.Second)
			}
			return nil
		})
	}
}
